@startuml

class SPH_handle
{
    SPH_handle(std::string filename) ; 
    set_export_file();
    void run(unsigned int step );

    FILE * fp;
    unsigned int total_step; 
    unsigned int particle_number;
    double dt ; 
    vector3d volume;
    parameter para;
    std::vector<Particle> particles;
    std::map<cubic_zone , std::set<unsigned int> > particle_list;
}

class parameter
{
    constexpr static double m = 1; // mass
    double h ; // kernel radius
    double rho0 ; // rest density
    double miu ; // viscosity
    double k ; // ideal gas constant
    double sigma ; // tension coefficient
    double g ;  //gravitational constant
}

class cubic_zone 
{
    cubic_zone()
    cubic_zone(int x_, int y_, int z_)

    int x ; 
    int y ; 
    int z ; 

    bool operator < (const cubic_zone &p) const;
}

class Particle 
{
    Particle(vector3d input_pos);

    cubic_zone get_grid(double h);
    double distance_squre(vector3d s);
    double get_rho(std::set<int> &surrounding_particles, std::vector<Particle> &particles, parameter &p);
    void update(std::set<int> &surrounding_particles, std::vector<Particle> &particles, double dt , parameter &p, vector3d volume);

    vector3d pos;
    vector3d v;
    double rho; 
    constexpr static double m = 1;

    bool operator < (const Particle &p) const;

    vector3d get_pressure(std::set<int> &surrounding_particles, std::vector<Particle> &particles, parameter &p);
    vector3d get_viscosity(std::set<int> &surrounding_particles, std::vector<Particle> &particles, parameter &p);
    vector3d get_tension(std::set<int> &surrounding_particles, std::vector<Particle> &particles, parameter &p);

    double kernel_poly6(vector3d r ,double h);
    vector3d kernal_poly6_gradient(vector3d r , double h );
    double kernal_poly6_laplacian(vector3d r , double h );
    vector3d kernel_spiky_gradient(vector3d r, double h);
    double kernel_viscosity_laplacian(vector3d r, double h);

}

class vector3d
{   
    vector3d();
    vector3d(double le_pos, double wi_pos, double he_pos);
    
    double x;
    double y;
    double z;

    double abs();

    vector3d operator + (vector3d v);
    vector3d operator - (vector3d v);
    vector3d operator - (vector3d v) const;
    vector3d operator * (double c);
    double operator * (const vector3d &c);
    vector3d operator / (double c);
    vector3d& operator += (vector3d v);
    vector3d& operator *= (double c);

}

circle main

note as main_note
    Entrance
end note

main_note -> main

main -> SPH_handle : instantiation
SPH_handle --> Particle
SPH_handle --> parameter

SPH_handle-> vector3d
SPH_handle-> cubic_zone
Particle-> vector3d

@enduml